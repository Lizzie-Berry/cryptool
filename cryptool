#!/bin/bash

# disable stderr unless -v 
exec 9>&2
if [ "$1" == -v ]; then shift; else exec 2>/dev/null; fi

# die with a message to stderr (whether -v or not)
die() { echo "$*" >&9; exit 1; }

usage()
{
    me=${0##*/}
    die "Usage:

    $me [-v] sign from.prv < unsignedtext > signedtext
    $me [-v] verify from.pub < signedtext > unsignedtext
    $me [-v] encrypt to.pub < plaintext > ciphertext
    $me [-v] decrypt to.prv < ciphertext > plaintext
    $me [-v] generate keybase [\"info string\"]
    $me [-v] dump key.pub|key.prv"
}    

(($# < 2)) && usage

set -o pipefail

openssl=/usr/bin/openssl
[ -x $openssl ] || die "Requires executable $openssl" 

case $1 in
    sign)
        prv=${2%.prv}.prv; [ -f $prv ] || die "$prv not found" 
        pub=${prv%.prv}.pub; [ -f $pub ] || die "$pub not found"
        $openssl cms -binary -sign -nodetach -nocerts -signer $pub -inkey $prv -outform DER || die "Sign failed" 
        ;;
     
    verify)
        pub=${2%.pub}.pub; [ -f $pub ] || die "$pub not found"
        $openssl cms -inform DER -verify -CAfile $pub -certfile $pub || die "Verify failed"
        ;;
   
    encrypt)
        pub=${2%.pub}.pub; [ -f $pub ] || die "$pub not found"
        $openssl cms -binary -encrypt -aes-256-cbc -outform DER $pub || die "Encrypt failed"
        ;;

    decrypt)
        prv=${2%.prv}.prv; [ -f $prv ] || die "$prv not found"
        $openssl cms -inform DER -decrypt -inkey $prv || die "Decrypt failed"
        ;;

    generate)
        pub=$2.pub; [ -e $pub ] && die "$pub already exists"
        prv=$2.prv; [ -e $prv ] && die "$prv already exists"
        $openssl req -x509 -newkey rsa:2048 -nodes -batch -sha256 -days 36524 -keyout $prv > $pub || die "Key generation failed"
        # append greppable info strings, note ':' can't appear in base64
        shift
        echo "Info: $*" >> $prv 
        echo "Info: $*" >> $pub
        ;;

    dump)
        k=$2; [ -f $k ] || die "$k not found"
        case $k in
            *.pub) $openssl x509 -in $k -text -noout || die "Invalid public key $k";;
            *.prv) $openssl rsa -in $k -text -check -noout || die "Invalid private key $k";;
            *) die "Invalid key name";;
        esac    
        grep Info: $k
        ;;

    *) usage;;
esac  
true
