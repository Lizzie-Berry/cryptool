Wrapper script for openssl, supporting the following functions:

    cryptool sign from.s < unsignedtext > signedtext
                
        Given the sender's secret key, read arbitrary data from stdin and write
        a binary PKCS7 object to stdout which contains the input data and its
        SHA256, encrypted with the secret key.
        
    cryptool verify from.p < signedtext > unsignedtext
        
        Given the sender's public key, read a binary PKCS7 object from stdin
        and verify the signature of the contained data, write it to stdout and
        exit 0.

    cryptool encrypt to.p < plaintext > ciphertext
             
        Given the recipient's public key, read arbitrary data from stdin and
        write a binary PKCS7 object to stdout containing the original data
        encrypted with a random AES256 session key, and the session key
        encrypted with the public key.
        
    cryptool decrypt to.s < ciphertext > plaintext
                
        Given a recpient's secret key, read a binary PKCS7 object from stdin,
        decrypt the enclosed data and write it to stdout. This is guaranteed to
        fail if the wrong key is provided, but it will produce random garbage
        first.
        
    cryptool generate [-bits] keyname [arbitrary info text]
                
        Given a basename eg 'test', generate 2048-bit RSA keys test.prv and
        test.pub as PEM files. The info string, if given, will be appended to
        the PEM text in a greppable fashion. test.prv is just an RSA private
        key, test.pub is actually a self-signed X509 cert.
        
    cryptool dump keyname.[s|p]
        
        Given a key file created with 'generate', print some interesting
        information about it. 
